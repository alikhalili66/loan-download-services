package ir.khalili.products.nas.core.utils.pdf;

import com.groupdocs.conversion.Converter;
import com.groupdocs.conversion.contracts.SaveDocumentStream;
import com.groupdocs.conversion.filetypes.PdfFileType;
import com.groupdocs.conversion.options.convert.*;
import io.vertx.core.json.JsonObject;
import ir.khalili.products.nas.core.dto.CreditReportNaturalPersonDto;
import ir.khalili.products.nas.core.dto.CreditReportNaturalPersonDto.*;
import ir.khalili.products.nas.core.utils.Base64Convertor;
import org.apache.poi.xwpf.usermodel.*;

import java.io.*;
import java.text.NumberFormat;
import java.util.List;

import static org.apache.poi.xwpf.usermodel.ParagraphAlignment.*;

/**
 * @author @bardiademon
 */
public final class CreditReportNaturalPerson {

    private final static String docx = "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";

    private final XWPFDocument document;
    private final CreditReportNaturalPersonDto dto;

    private JsonObject base64Pdf;
    private byte[] bytes;

    private CreditReportNaturalPerson(final InputStream inputStream , final CreditReportNaturalPersonDto dto) throws Exception {
        this.dto = dto;
        document = new XWPFDocument(inputStream);
    }

    public static CreditReportNaturalPerson create(final CreditReportNaturalPersonDto dto) throws Exception {
        final CreditReportNaturalPerson creditReportNaturalPerson = new CreditReportNaturalPerson(Base64Convertor.toInputStream(docx) , dto);
        creditReportNaturalPerson.create();
        return creditReportNaturalPerson;
    }

    private void create() throws Exception {
        modifyWordFile();
        bytes = toByteArray();
        base64Pdf = Base64Convertor.streamToBase64(new ByteArrayInputStream(bytes) , "report.pdf");
    }

    private void modifyWordFile() {
        addTitleDate();
        addPersonalInformation(dto.getPersonal());
        addChart();

        int lastRowIndex;
        lastRowIndex = addReasonsForPoints(dto.getReasonsForPoints());
        lastRowIndex = addInquiryStatistics(dto.getInquiryStatistics() , lastRowIndex);
        lastRowIndex = addContractInformation(dto.getContractInformations() , lastRowIndex);
        lastRowIndex = addPersonalRoles(dto.getPersonRoles() , lastRowIndex);
        lastRowIndex = addDetailsPersonNegativeSituation(dto.getDetailsPersonNegativeSituations() , lastRowIndex);
        lastRowIndex = addFacilities(dto.getFacilities() , lastRowIndex);
        lastRowIndex = addGeneralInformation(dto.getGeneralInformations() , lastRowIndex);
        lastRowIndex = addOtherRelatedParties(dto.getOtherRelatedParties() , lastRowIndex);
        lastRowIndex = addContractDetails(dto.getContractDetails() , lastRowIndex);
        lastRowIndex = addReimbursementCalendar(dto.getReimbursementCalendars() , lastRowIndex);
        lastRowIndex = addFacilities2(dto.getFacilities2() , lastRowIndex);
        lastRowIndex = addGeneralInformation2(dto.getGeneralInformations2() , lastRowIndex);
        lastRowIndex = addOtherRelatedParties2(dto.getOtherRelatedParties2() , lastRowIndex);
        lastRowIndex = addContractDetails2(dto.getContractDetails2() , lastRowIndex);
        lastRowIndex = addReimbursementCalendar2(dto.getReimbursementCalendars2() , lastRowIndex);
        addDatePreparationOfTheReport(lastRowIndex);
    }

    private void addTitleDate() {
        setTableCell(0 , 0 , 2 , 11 , CENTER , String.format("تاریخ ایجاد درخواست: %s" , dto.getDatePreparationOfTheReport()));
    }

    private void addPersonalInformation(final PersonalInformation personal) {
        setTableCell(1 , 1 , 1 , 9 , CENTER , personal.getFirstName()); // First Name
        setTableCell(1 , 1 , 3 , 9 , CENTER , personal.getLastName()); // Last Name

        setTableCell(1 , 2 , 1 , 9 , CENTER , personal.getNationalCode()); // National Number
        setTableCell(1 , 2 , 3 , 9 , CENTER , personal.getFatherName());     // Father Name

        setTableCell(1 , 3 , 1 , 9 , CENTER , personal.getPlaceOfBirth()); // Place Of Birth
        setTableCell(1 , 3 , 3 , 9 , CENTER , personal.getDateOfBirth()); //  Date Of Birth

        setTableCell(1 , 4 , 1 , 9 , CENTER , personal.getSex());       // Sex
        setTableCell(1 , 4 , 3 , 9 , CENTER , personal.getMaritalStatus()); //  Marital Status

        setTableCell(1 , 5 , 0 , 9 , RIGHT , String.format("آدرس: %s" , personal.getAddress())); //  Address

        setTableCell(1 , 7 , 1 , 9 , CENTER , personal.getLandlinePhone()); //  Landline Phone
    }

    private void addChart() {
        setTableCell(2 , 0 , 0 , 28 , CENTER , dto.getIranianScoreRisk());
        document.getTableArray(2).getRow(0).getCell(0).getParagraphArray(0).getRuns().get(0).setBold(true);

        setTableCell(2 , 1 , 0 , 28 , CENTER , dto.getIranianScoreDescription());
        document.getTableArray(2).getRow(1).getCell(0).getParagraphArray(0).getRuns().get(0).setBold(true);

        final XWPFTableCell cell = document.getTableArray(2).getRow(0).getCell(1);
        final XWPFParagraph paragraph = cell.addParagraph();
        paragraph.setAlignment(CENTER);
        final XWPFRun run = paragraph.createRun();
        run.setFontSize(11);
        run.setText(String.valueOf(dto.getIranianScoreScore()));
    }

    private int addReasonsForPoints(final List<ReasonsForPoint> addReasonsForPoints) {
        final XWPFTable table = document.getTableArray(2);

        final int firstRowIndex = 4;
        if (addReasonsForPoints == null || addReasonsForPoints.isEmpty()) {
            return firstRowIndex;
        }

        int indexRow = firstRowIndex + 1;

        final XWPFTableRow firstEmptyRow = table.getRow(firstRowIndex);

        for (final ReasonsForPoint addReasonsForPoint : addReasonsForPoints) {

            final XWPFTableRow row = new XWPFTableRow(firstEmptyRow.getCtRow() , table);

            final XWPFTableCell cellCode = row.getCell(0);
            cellCode.getCTTc().set(firstEmptyRow.getCell(0).getCTTc());
            setCell(cellCode , 9 , CENTER , addReasonsForPoint.getCode());

            final XWPFTableCell cellDescription = row.getCell(1);
            cellDescription.getCTTc().set(firstEmptyRow.getCell(1).getCTTc());
            setCell(cellDescription , 9 , CENTER , addReasonsForPoint.getDescription());

            table.addRow(row , indexRow++);
        }
        table.removeRow(firstRowIndex);

        return indexRow - 2;
    }

    private int addInquiryStatistics(final List<InquiryStatistics> inquiryStatisticsLst , final int lastPreviousInformationRow) {
        final XWPFTable table = document.getTableArray(2);

        final int firstRowIndex = lastPreviousInformationRow + 4;

        if (inquiryStatisticsLst == null || inquiryStatisticsLst.isEmpty()) {
            return firstRowIndex;
        }

//        System.out.println("firstRowIndex = " + firstRowIndex);

        int indexRow = firstRowIndex + 1;

        final XWPFTableRow firstEmptyRow = table.getRow(firstRowIndex);

        for (final InquiryStatistics inquiryStatistics : inquiryStatisticsLst) {

            final XWPFTableRow row = new XWPFTableRow(firstEmptyRow.getCtRow() , table);

            final XWPFTableCell cell0 = row.getCell(0);
            cell0.getCTTc().set(firstEmptyRow.getCell(0).getCTTc());
            setCell(cell0 , 9 , CENTER , String.valueOf(inquiryStatistics.getMemberType()));

            final XWPFTableCell cell1 = row.getCell(1);
            cell1.getCTTc().set(firstEmptyRow.getCell(1).getCTTc());
            setCell(cell1 , 9 , CENTER , String.valueOf(inquiryStatistics.getLastMonthInquiryCount()));

            final XWPFTableCell cell2 = row.getCell(2);
            cell2.getCTTc().set(firstEmptyRow.getCell(2).getCTTc());
            setCell(cell2 , 9 , CENTER , String.valueOf(inquiryStatistics.getLastYearInquiryCount()));

            final XWPFTableCell cell3 = row.getCell(3);
            cell3.getCTTc().set(firstEmptyRow.getCell(3).getCTTc());
            setCell(cell3 , 9 , CENTER , String.valueOf(inquiryStatistics.getPersonNegativeStatusCount()));

            final XWPFTableCell cell4 = row.getCell(4);
            cell4.getCTTc().set(firstEmptyRow.getCell(4).getCTTc());
            setCell(cell4 , 9 , CENTER , String.valueOf(inquiryStatistics.getContractNegativeStatusCount()));

            table.addRow(row , indexRow++);
        }
        table.removeRow(firstRowIndex);

        return indexRow - 2;
    }

    private int addContractInformation(final List<ContractInformation> contractInformationLst , final int lastPreviousInformationRow) {
        final XWPFTable table = document.getTableArray(2);

        final int firstRowIndex = lastPreviousInformationRow + 3;
        if (contractInformationLst == null || contractInformationLst.isEmpty()) {
            return firstRowIndex;
        }

//        System.out.println("firstRowIndex = " + firstRowIndex);
        int indexRow = firstRowIndex + 1;

        final XWPFTableRow firstEmptyRow = table.getRow(firstRowIndex);

        for (final ContractInformation contractInformation : contractInformationLst) {

            final XWPFTableRow row = new XWPFTableRow(firstEmptyRow.getCtRow() , table);

            final XWPFTableCell cell0 = row.getCell(0);
            cell0.getCTTc().set(firstEmptyRow.getCell(0).getCTTc());
            setCell(cell0 , 9 , CENTER , contractInformation.getContractType());

            final XWPFTableCell cell1 = row.getCell(1);
            cell1.getCTTc().set(firstEmptyRow.getCell(1).getCTTc());
            setCell(cell1 , 9 , CENTER , contractInformation.getTruster());

            final XWPFTableCell cell2 = row.getCell(2);
            cell2.getCTTc().set(firstEmptyRow.getCell(2).getCTTc());
            setCell(cell2 , 9 , CENTER , contractInformation.getCurrency());

            final XWPFTableCell cell3 = row.getCell(3);
            cell3.getCTTc().set(firstEmptyRow.getCell(3).getCTTc());
            setCell(cell3 , 9 , CENTER , String.valueOf(contractInformation.getNumberOfContractsInProgress()));

            final XWPFTableCell cell4 = row.getCell(4);
            cell4.getCTTc().set(firstEmptyRow.getCell(4).getCTTc());
            setCell(cell4 , 9 , CENTER , String.valueOf(contractInformation.getNumberOfTerminatedContracts()));

            final XWPFTableCell cell5 = row.getCell(5);
            cell5.getCTTc().set(firstEmptyRow.getCell(5).getCTTc());
            setCell(cell5 , 9 , CENTER , moneyToString(contractInformation.getNotDoneDueDate()));

            final XWPFTableCell cell6 = row.getCell(6);
            cell6.getCTTc().set(firstEmptyRow.getCell(6).getCTTc());
            setCell(cell6 , 9 , CENTER , moneyToString(contractInformation.getDoneDueDate()));

            table.addRow(row , indexRow++);
        }
        table.removeRow(firstRowIndex);

        return indexRow - 2;
    }

    private int addPersonalRoles(final List<PersonRole> personRoles , final int lastPreviousInformationRow) {
        final XWPFTable table = document.getTableArray(2);

        final int firstRowIndex = lastPreviousInformationRow + 4;
        if (personRoles == null || personRoles.isEmpty()) {
            return firstRowIndex;
        }

//        System.out.println("firstRowIndex = " + firstRowIndex);
        int indexRow = firstRowIndex + 1;

        final XWPFTableRow firstEmptyRow = table.getRow(firstRowIndex);

        for (final PersonRole personRole : personRoles) {

            final XWPFTableRow row = new XWPFTableRow(firstEmptyRow.getCtRow() , table);

            final XWPFTableCell cell0 = row.getCell(0);
            cell0.getCTTc().set(firstEmptyRow.getCell(0).getCTTc());
            setCell(cell0 , 9 , CENTER , personRole.getRole());

            final XWPFTableCell cell1 = row.getCell(1);
            cell1.getCTTc().set(firstEmptyRow.getCell(1).getCTTc());
            setCell(cell1 , 9 , CENTER , String.valueOf(personRole.getNumberOfContract()));

            table.addRow(row , indexRow++);
        }
        table.removeRow(firstRowIndex);

        return indexRow - 2;
    }

    private int addDetailsPersonNegativeSituation(final List<DetailsPersonNegativeSituation> detailsPersonNegativeSituations , final int lastPreviousInformationRow) {
        final XWPFTable table = document.getTableArray(2);

        final int firstRowIndex = lastPreviousInformationRow + 3;
        if (detailsPersonNegativeSituations == null || detailsPersonNegativeSituations.isEmpty()) {
            return firstRowIndex;
        }

//        System.out.println("firstRowIndex = " + firstRowIndex);
        int indexRow = firstRowIndex + 1;

        final XWPFTableRow firstEmptyRow = table.getRow(firstRowIndex);

        for (final DetailsPersonNegativeSituation detailsPersonNegativeSituation : detailsPersonNegativeSituations) {

            final XWPFTableRow row = new XWPFTableRow(firstEmptyRow.getCtRow() , table);

            final XWPFTableCell cell0 = row.getCell(0);
            cell0.getCTTc().set(firstEmptyRow.getCell(0).getCTTc());
            setCell(cell0 , 9 , CENTER , detailsPersonNegativeSituation.getMemberType());

            final XWPFTableCell cell1 = row.getCell(1);
            cell1.getCTTc().set(firstEmptyRow.getCell(1).getCTTc());
            setCell(cell1 , 9 , CENTER , detailsPersonNegativeSituation.getMemberName());

            final XWPFTableCell cell2 = row.getCell(2);
            cell2.getCTTc().set(firstEmptyRow.getCell(2).getCTTc());
            setCell(cell2 , 9 , CENTER , detailsPersonNegativeSituation.getNegativeStatusType());

            final XWPFTableCell cell3 = row.getCell(3);
            cell3.getCTTc().set(firstEmptyRow.getCell(3).getCTTc());
            setCell(cell3 , 9 , CENTER , detailsPersonNegativeSituation.getStatusAnnouncementDate());

            table.addRow(row , indexRow++);
        }
        table.removeRow(firstRowIndex);

        return indexRow - 2;
    }

    private int addFacilities(final List<Facilities> facilities , final int lastPreviousInformationRow) {
        final XWPFTable table = document.getTableArray(2);

        final int firstRowIndex = lastPreviousInformationRow + 5;
        if (facilities == null || facilities.isEmpty()) {
            return firstRowIndex;
        }

//        System.out.println("firstRowIndex = " + firstRowIndex);
        int indexRow = firstRowIndex + 1;

        final XWPFTableRow firstEmptyRow = table.getRow(firstRowIndex);

        for (final Facilities facilitiesItem : facilities) {

            final XWPFTableRow row = new XWPFTableRow(firstEmptyRow.getCtRow() , table);

            final XWPFTableCell cell0 = row.getCell(0);
            cell0.getCTTc().set(firstEmptyRow.getCell(0).getCTTc());
            setCell(cell0 , 9 , CENTER , facilitiesItem.getContractNumber());

            final XWPFTableCell cell1 = row.getCell(1);
            cell1.getCTTc().set(firstEmptyRow.getCell(1).getCTTc());
            setCell(cell1 , 9 , CENTER , facilitiesItem.getLevel());

            table.addRow(row , indexRow++);
        }
        table.removeRow(firstRowIndex);

        return indexRow - 2;
    }

    private int addGeneralInformation(final List<GeneralInformation> generalInformations , final int lastPreviousInformationRow) {
        final XWPFTable table = document.getTableArray(2);

        final int firstRowIndex = lastPreviousInformationRow + 3;
        if (generalInformations == null || generalInformations.isEmpty()) {
            return firstRowIndex;
        }

//        System.out.println("firstRowIndex = " + firstRowIndex);
        int indexRow = firstRowIndex + 1;

        final XWPFTableRow firstEmptyRow = table.getRow(firstRowIndex);

        for (final GeneralInformation generalInformation : generalInformations) {

            final XWPFTableRow row = new XWPFTableRow(firstEmptyRow.getCtRow() , table);

            final XWPFTableCell cell0 = row.getCell(0);
            cell0.getCTTc().set(firstEmptyRow.getCell(0).getCTTc());
            setCell(cell0 , 7 , CENTER , generalInformation.getContractNumber());

            final XWPFTableCell cell1 = row.getCell(1);
            cell1.getCTTc().set(firstEmptyRow.getCell(1).getCTTc());
            setCell(cell1 , 7 , CENTER , generalInformation.getNegativeStatusContract());

            final XWPFTableCell cell2 = row.getCell(2);
            cell2.getCTTc().set(firstEmptyRow.getCell(2).getCTTc());
            setCell(cell2 , 7 , CENTER , generalInformation.getTypeContractBank());

            final XWPFTableCell cell3 = row.getCell(3);
            cell3.getCTTc().set(firstEmptyRow.getCell(3).getCTTc());
            setCell(cell3 , 7 , CENTER , generalInformation.getStartDate());

            final XWPFTableCell cell4 = row.getCell(4);
            cell4.getCTTc().set(firstEmptyRow.getCell(4).getCTTc());
            setCell(cell4 , 7 , CENTER , generalInformation.getEstimatedCompletionDate());

            final XWPFTableCell cell5 = row.getCell(5);
            cell5.getCTTc().set(firstEmptyRow.getCell(5).getCTTc());
            setCell(cell5 , 7 , CENTER , generalInformation.getCurrency());

            final XWPFTableCell cell6 = row.getCell(6);
            cell6.getCTTc().set(firstEmptyRow.getCell(6).getCTTc());
            setCell(cell6 , 7 , CENTER , generalInformation.getStatusAnnouncementDate());

            final XWPFTableCell cell7 = row.getCell(7);
            cell7.getCTTc().set(firstEmptyRow.getCell(7).getCTTc());
            setCell(cell7 , 7 , CENTER , generalInformation.getPurposeReceivingFacility());

            final XWPFTableCell cell8 = row.getCell(8);
            cell8.getCTTc().set(firstEmptyRow.getCell(8).getCTTc());
            setCell(cell8 , 7 , CENTER , generalInformation.getRolePerson());

            final XWPFTableCell cell9 = row.getCell(9);
            cell9.getCTTc().set(firstEmptyRow.getCell(9).getCTTc());
            setCell(cell9 , 7 , CENTER , generalInformation.getTruster());

            table.addRow(row , indexRow++);
        }
        table.removeRow(firstRowIndex);

        return indexRow - 2;
    }

    private int addOtherRelatedParties(final List<OtherRelatedParties> otherRelatedParties , final int lastPreviousInformationRow) {
        final XWPFTable table = document.getTableArray(2);

        final int firstRowIndex = lastPreviousInformationRow + 3;
        if (otherRelatedParties == null || otherRelatedParties.isEmpty()) {
            return firstRowIndex;
        }

//        System.out.println("firstRowIndex = " + firstRowIndex);
        int indexRow = firstRowIndex + 1;

        final XWPFTableRow firstEmptyRow = table.getRow(firstRowIndex);

        for (final OtherRelatedParties otherRelatedPartiesItem : otherRelatedParties) {

            final XWPFTableRow row = new XWPFTableRow(firstEmptyRow.getCtRow() , table);

            final XWPFTableCell cell0 = row.getCell(0);
            cell0.getCTTc().set(firstEmptyRow.getCell(0).getCTTc());
            setCell(cell0 , 9 , CENTER , String.valueOf(otherRelatedPartiesItem.getNationalNumber()));

            final XWPFTableCell cell1 = row.getCell(1);
            cell1.getCTTc().set(firstEmptyRow.getCell(1).getCTTc());
            setCell(cell1 , 9 , CENTER , otherRelatedPartiesItem.getRolePerson());

            table.addRow(row , indexRow++);
        }
        table.removeRow(firstRowIndex);

        return indexRow - 2;
    }

    private int addContractDetails(final List<ContractDetails> contractDetails , final int lastPreviousInformationRow) {
        final XWPFTable table = document.getTableArray(2);

        final int firstRowIndex = lastPreviousInformationRow + 3;
        if (contractDetails == null || contractDetails.isEmpty()) {
            return firstRowIndex;
        }

//        System.out.println("firstRowIndex = " + firstRowIndex);
        int indexRow = firstRowIndex + 1;

        final XWPFTableRow firstEmptyRow = table.getRow(firstRowIndex);

        for (final ContractDetails contractDetailsItem : contractDetails) {

            final XWPFTableRow row = new XWPFTableRow(firstEmptyRow.getCtRow() , table);

            final XWPFTableCell cell0 = row.getCell(0);
            cell0.getCTTc().set(firstEmptyRow.getCell(0).getCTTc());
            setCell(cell0 , 7 , CENTER , contractDetailsItem.getContractNumber());

            final XWPFTableCell cell1 = row.getCell(1);
            cell1.getCTTc().set(firstEmptyRow.getCell(1).getCTTc());
            setCell(cell1 , 7 , CENTER , String.valueOf(contractDetailsItem.getAmountDue()));

            final XWPFTableCell cell2 = row.getCell(2);
            cell2.getCTTc().set(firstEmptyRow.getCell(2).getCTTc());
            setCell(cell2 , 7 , CENTER , String.valueOf(contractDetailsItem.getNumberOfUnpaidDueInstallments()));

            final XWPFTableCell cell3 = row.getCell(3);
            cell3.getCTTc().set(firstEmptyRow.getCell(3).getCTTc());
            setCell(cell3 , 7 , CENTER , moneyToString(contractDetailsItem.getTotalAmountContract()));

            final XWPFTableCell cell4 = row.getCell(4);
            cell4.getCTTc().set(firstEmptyRow.getCell(4).getCTTc());
            setCell(cell4 , 7 , CENTER , moneyToString(contractDetailsItem.getAmountInstallment()));

            final XWPFTableCell cell5 = row.getCell(5);
            cell5.getCTTc().set(firstEmptyRow.getCell(5).getCTTc());
            setCell(cell5 , 7 , CENTER , String.valueOf(contractDetailsItem.getTotalNumberOfInstallments()));

            final XWPFTableCell cell6 = row.getCell(6);
            cell6.getCTTc().set(firstEmptyRow.getCell(6).getCTTc());
            setCell(cell6 , 7 , CENTER , moneyToString(contractDetailsItem.getAmountNotDue()));

            final XWPFTableCell cell7 = row.getCell(7);
            cell7.getCTTc().set(firstEmptyRow.getCell(7).getCTTc());
            setCell(cell7 , 7 , CENTER , String.valueOf(contractDetailsItem.getNumberOfDeferredInstallments()));

            final XWPFTableCell cell8 = row.getCell(8);
            cell8.getCTTc().set(firstEmptyRow.getCell(8).getCTTc());
            setCell(cell8 , 7 , CENTER , contractDetailsItem.getInstallmentType());

            final XWPFTableCell cell9 = row.getCell(9);
            cell9.getCTTc().set(firstEmptyRow.getCell(9).getCTTc());
            setCell(cell9 , 7 , CENTER , contractDetailsItem.getPaymentTurn());

            final XWPFTableCell cell10 = row.getCell(10);
            cell10.getCTTc().set(firstEmptyRow.getCell(10).getCTTc());
            setCell(cell10 , 7 , CENTER , contractDetailsItem.getPaymentType());

            table.addRow(row , indexRow++);
        }
        table.removeRow(firstRowIndex);

        return indexRow - 2;
    }

    private int addReimbursementCalendar(final List<ReimbursementCalendar> reimbursementCalendars , final int lastPreviousInformationRow) {
        final XWPFTable table = document.getTableArray(2);

        final int firstRowIndex = lastPreviousInformationRow + 3;
        if (reimbursementCalendars == null || reimbursementCalendars.isEmpty()) {
            return firstRowIndex;
        }

//        System.out.println("firstRowIndex = " + firstRowIndex);
        int indexRow = firstRowIndex + 1;

        final XWPFTableRow firstEmptyRow = table.getRow(firstRowIndex);

        for (final ReimbursementCalendar reimbursementCalendar : reimbursementCalendars) {

            final XWPFTableRow row = new XWPFTableRow(firstEmptyRow.getCtRow() , table);

            final XWPFTableCell cell0 = row.getCell(0);
            cell0.getCTTc().set(firstEmptyRow.getCell(0).getCTTc());
            setCell(cell0 , 9 , CENTER , reimbursementCalendar.getYearMonth());

            final XWPFTableCell cell1 = row.getCell(1);
            cell1.getCTTc().set(firstEmptyRow.getCell(1).getCTTc());
            setCell(cell1 , 9 , CENTER , String.valueOf(reimbursementCalendar.getNumberOfUnpaidDueInstallments()));

            final XWPFTableCell cell2 = row.getCell(2);
            cell2.getCTTc().set(firstEmptyRow.getCell(2).getCTTc());
            setCell(cell2 , 9 , CENTER , moneyToString(reimbursementCalendar.getAmountTheDueDebtHasNotBeenPaid()));

            table.addRow(row , indexRow++);
        }
        table.removeRow(firstRowIndex);

        return indexRow - 2;
    }

    private int addFacilities2(final List<Facilities> facilities , final int lastPreviousInformationRow) {
        final XWPFTable table = document.getTableArray(2);

        final int firstRowIndex = lastPreviousInformationRow + 4;
        if (facilities == null || facilities.isEmpty()) {
            return firstRowIndex;
        }

//        System.out.println("firstRowIndex = " + firstRowIndex);
        int indexRow = firstRowIndex + 1;

        final XWPFTableRow firstEmptyRow = table.getRow(firstRowIndex);

        for (final Facilities facilitiesItem : facilities) {

            final XWPFTableRow row = new XWPFTableRow(firstEmptyRow.getCtRow() , table);

            final XWPFTableCell cell0 = row.getCell(0);
            cell0.getCTTc().set(firstEmptyRow.getCell(0).getCTTc());
            setCell(cell0 , 9 , CENTER , facilitiesItem.getContractNumber());

            final XWPFTableCell cell1 = row.getCell(1);
            cell1.getCTTc().set(firstEmptyRow.getCell(1).getCTTc());
            setCell(cell1 , 9 , CENTER , facilitiesItem.getLevel());

            table.addRow(row , indexRow++);
        }
        table.removeRow(firstRowIndex);

        return indexRow - 2;
    }

    private int addGeneralInformation2(final List<GeneralInformation> generalInformations , final int lastPreviousInformationRow) {
        final XWPFTable table = document.getTableArray(2);

        final int firstRowIndex = lastPreviousInformationRow + 3;
        if (generalInformations == null || generalInformations.isEmpty()) {
            return firstRowIndex;
        }

//        System.out.println("firstRowIndex = " + firstRowIndex);
        int indexRow = firstRowIndex + 1;

        final XWPFTableRow firstEmptyRow = table.getRow(firstRowIndex);

        for (final GeneralInformation generalInformation : generalInformations) {

            final XWPFTableRow row = new XWPFTableRow(firstEmptyRow.getCtRow() , table);

            final XWPFTableCell cell0 = row.getCell(0);
            cell0.getCTTc().set(firstEmptyRow.getCell(0).getCTTc());
            setCell(cell0 , 7 , CENTER , generalInformation.getContractNumber());

            final XWPFTableCell cell1 = row.getCell(1);
            cell1.getCTTc().set(firstEmptyRow.getCell(1).getCTTc());
            setCell(cell1 , 7 , CENTER , generalInformation.getNegativeStatusContract());

            final XWPFTableCell cell2 = row.getCell(2);
            cell2.getCTTc().set(firstEmptyRow.getCell(2).getCTTc());
            setCell(cell2 , 7 , CENTER , generalInformation.getTypeContractBank());

            final XWPFTableCell cell3 = row.getCell(3);
            cell3.getCTTc().set(firstEmptyRow.getCell(3).getCTTc());
            setCell(cell3 , 7 , CENTER , generalInformation.getStartDate());

            final XWPFTableCell cell4 = row.getCell(4);
            cell4.getCTTc().set(firstEmptyRow.getCell(4).getCTTc());
            setCell(cell4 , 7 , CENTER , generalInformation.getEstimatedCompletionDate());

            final XWPFTableCell cell5 = row.getCell(5);
            cell5.getCTTc().set(firstEmptyRow.getCell(5).getCTTc());
            setCell(cell5 , 7 , CENTER , generalInformation.getCurrency());

            final XWPFTableCell cell6 = row.getCell(6);
            cell6.getCTTc().set(firstEmptyRow.getCell(6).getCTTc());
            setCell(cell6 , 7 , CENTER , generalInformation.getStatusAnnouncementDate());

            final XWPFTableCell cell7 = row.getCell(7);
            cell7.getCTTc().set(firstEmptyRow.getCell(7).getCTTc());
            setCell(cell7 , 7 , CENTER , generalInformation.getPurposeReceivingFacility());

            final XWPFTableCell cell8 = row.getCell(8);
            cell8.getCTTc().set(firstEmptyRow.getCell(8).getCTTc());
            setCell(cell8 , 7 , CENTER , generalInformation.getRolePerson());

            final XWPFTableCell cell9 = row.getCell(9);
            cell9.getCTTc().set(firstEmptyRow.getCell(9).getCTTc());
            setCell(cell9 , 7 , CENTER , generalInformation.getTruster());

            table.addRow(row , indexRow++);
        }
        table.removeRow(firstRowIndex);

        return indexRow - 2;
    }

    private int addOtherRelatedParties2(final List<OtherRelatedParties> otherRelatedParties , final int lastPreviousInformationRow) {
        final XWPFTable table = document.getTableArray(2);

        final int firstRowIndex = lastPreviousInformationRow + 3;
        if (otherRelatedParties == null || otherRelatedParties.isEmpty()) {
            return firstRowIndex;
        }

//        System.out.println("firstRowIndex = " + firstRowIndex);
        int indexRow = firstRowIndex + 1;

        final XWPFTableRow firstEmptyRow = table.getRow(firstRowIndex);

        for (final OtherRelatedParties otherRelatedPartiesItem : otherRelatedParties) {

            final XWPFTableRow row = new XWPFTableRow(firstEmptyRow.getCtRow() , table);

            final XWPFTableCell cell0 = row.getCell(0);
            cell0.getCTTc().set(firstEmptyRow.getCell(0).getCTTc());
            setCell(cell0 , 9 , CENTER , String.valueOf(otherRelatedPartiesItem.getNationalNumber()));

            final XWPFTableCell cell1 = row.getCell(1);
            cell1.getCTTc().set(firstEmptyRow.getCell(1).getCTTc());
            setCell(cell1 , 9 , CENTER , otherRelatedPartiesItem.getRolePerson());

            table.addRow(row , indexRow++);
        }
        table.removeRow(firstRowIndex);

        return indexRow - 2;
    }

    private int addContractDetails2(final List<ContractDetails> contractDetails , final int lastPreviousInformationRow) {
        final XWPFTable table = document.getTableArray(2);

        final int firstRowIndex = lastPreviousInformationRow + 3;
        if (contractDetails == null || contractDetails.isEmpty()) {
            return firstRowIndex;
        }

//        System.out.println("firstRowIndex = " + firstRowIndex);
        int indexRow = firstRowIndex + 1;

        final XWPFTableRow firstEmptyRow = table.getRow(firstRowIndex);

        for (final ContractDetails contractDetailsItem : contractDetails) {

            final XWPFTableRow row = new XWPFTableRow(firstEmptyRow.getCtRow() , table);

            final XWPFTableCell cell0 = row.getCell(0);
            cell0.getCTTc().set(firstEmptyRow.getCell(0).getCTTc());
            setCell(cell0 , 7 , CENTER , contractDetailsItem.getContractNumber());

            final XWPFTableCell cell1 = row.getCell(1);
            cell1.getCTTc().set(firstEmptyRow.getCell(1).getCTTc());
            setCell(cell1 , 7 , CENTER , String.valueOf(contractDetailsItem.getAmountDue()));

            final XWPFTableCell cell2 = row.getCell(2);
            cell2.getCTTc().set(firstEmptyRow.getCell(2).getCTTc());
            setCell(cell2 , 7 , CENTER , String.valueOf(contractDetailsItem.getNumberOfUnpaidDueInstallments()));

            final XWPFTableCell cell3 = row.getCell(3);
            cell3.getCTTc().set(firstEmptyRow.getCell(3).getCTTc());
            setCell(cell3 , 7 , CENTER , moneyToString(contractDetailsItem.getTotalAmountContract()));

            final XWPFTableCell cell4 = row.getCell(4);
            cell4.getCTTc().set(firstEmptyRow.getCell(4).getCTTc());
            setCell(cell4 , 7 , CENTER , moneyToString(contractDetailsItem.getAmountInstallment()));

            final XWPFTableCell cell5 = row.getCell(5);
            cell5.getCTTc().set(firstEmptyRow.getCell(5).getCTTc());
            setCell(cell5 , 7 , CENTER , String.valueOf(contractDetailsItem.getTotalNumberOfInstallments()));

            final XWPFTableCell cell6 = row.getCell(6);
            cell6.getCTTc().set(firstEmptyRow.getCell(6).getCTTc());
            setCell(cell6 , 7 , CENTER , moneyToString(contractDetailsItem.getAmountNotDue()));

            final XWPFTableCell cell7 = row.getCell(7);
            cell7.getCTTc().set(firstEmptyRow.getCell(7).getCTTc());
            setCell(cell7 , 7 , CENTER , String.valueOf(contractDetailsItem.getNumberOfDeferredInstallments()));

            final XWPFTableCell cell8 = row.getCell(8);
            cell8.getCTTc().set(firstEmptyRow.getCell(8).getCTTc());
            setCell(cell8 , 7 , CENTER , contractDetailsItem.getInstallmentType());

            final XWPFTableCell cell9 = row.getCell(9);
            cell9.getCTTc().set(firstEmptyRow.getCell(9).getCTTc());
            setCell(cell9 , 7 , CENTER , contractDetailsItem.getPaymentTurn());

            final XWPFTableCell cell10 = row.getCell(10);
            cell10.getCTTc().set(firstEmptyRow.getCell(10).getCTTc());
            setCell(cell10 , 7 , CENTER , contractDetailsItem.getPaymentType());

            table.addRow(row , indexRow++);
        }
        table.removeRow(firstRowIndex);

        return indexRow - 2;
    }

    private int addReimbursementCalendar2(final List<ReimbursementCalendar> reimbursementCalendars , final int lastPreviousInformationRow) {
        final XWPFTable table = document.getTableArray(2);

        final int firstRowIndex = lastPreviousInformationRow + 3;
        if (reimbursementCalendars == null || reimbursementCalendars.isEmpty()) {
            return firstRowIndex;
        }

//        System.out.println("firstRowIndex = " + firstRowIndex);
        int indexRow = firstRowIndex + 1;

        final XWPFTableRow firstEmptyRow = table.getRow(firstRowIndex);

        for (final ReimbursementCalendar reimbursementCalendar : reimbursementCalendars) {

            final XWPFTableRow row = new XWPFTableRow(firstEmptyRow.getCtRow() , table);

            final XWPFTableCell cell0 = row.getCell(0);
            cell0.getCTTc().set(firstEmptyRow.getCell(0).getCTTc());
            setCell(cell0 , 9 , CENTER , reimbursementCalendar.getYearMonth());

            final XWPFTableCell cell1 = row.getCell(1);
            cell1.getCTTc().set(firstEmptyRow.getCell(1).getCTTc());
            setCell(cell1 , 9 , CENTER , String.valueOf(reimbursementCalendar.getNumberOfUnpaidDueInstallments()));

            final XWPFTableCell cell2 = row.getCell(2);
            cell2.getCTTc().set(firstEmptyRow.getCell(2).getCTTc());
            setCell(cell2 , 9 , CENTER , moneyToString(reimbursementCalendar.getAmountTheDueDebtHasNotBeenPaid()));

            table.addRow(row , indexRow++);
        }
        table.removeRow(firstRowIndex);

        return indexRow - 2;
    }

    private void addDatePreparationOfTheReport(final int lastPreviousInformationRow) {
        setTableCell(2 , lastPreviousInformationRow + 2 , 1 , 9 , RIGHT , dto.getDatePreparationOfTheReport());
    }

    private void setTableCell(final int tablePos , final int rowPos , final int cellPos , final double fontSize , final ParagraphAlignment alignment , final String value) {

        final XWPFTable table = document.getTableArray(tablePos);
        final XWPFTableRow tableRow = table.getRow(rowPos);
        final XWPFTableCell cell = tableRow.getCell(cellPos);

        setCell(cell , fontSize , alignment , value);
    }

    private void setCell(final XWPFTableCell cell , final double fontSize , final ParagraphAlignment alignment , final String value) {
        for (int i = 0; i < cell.getParagraphs().size(); i++) {
            cell.removeParagraph(i);
        }

        final XWPFParagraph paragraph = cell.addParagraph();
        paragraph.setAlignment(alignment);

        final XWPFRun run = paragraph.createRun();
        run.setFontSize((int) fontSize);
        run.setText(value);

        cell.setParagraph(paragraph);
    }

    private byte[] toByteArray() throws IOException {

        final ByteArrayOutputStream outputStreamWord = new ByteArrayOutputStream();
        document.write(outputStreamWord);

        @SuppressWarnings("deprecation")
		final Converter converter = new Converter(new ByteArrayInputStream(outputStreamWord.toByteArray()));
        final PdfConvertOptions pdfConvertOptions = new PdfConvertOptions();
        pdfConvertOptions.setFormat_ConvertOptions_New(PdfFileType.Pdf);
        pdfConvertOptions.setMarginLeft(-70);

        final ByteArrayOutputStream outputStreamPDF = new ByteArrayOutputStream();
        final SaveDocumentStream saveDocumentStream = () -> outputStreamPDF;

        converter.convert(saveDocumentStream , pdfConvertOptions);
        converter.close();

        saveDocumentStream.get();

        return outputStreamPDF.toByteArray();
    }

    private String moneyToString(final double money) {
        return NumberFormat.getCurrencyInstance().format(money).substring(1);
    }

    public JsonObject getBase64Pdf() {
        return base64Pdf;
    }

    public byte[] getBytes() {
        return bytes;
    }
}
